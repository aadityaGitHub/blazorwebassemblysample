@page "/employee/{id:int}"
@using AtndTrackBlazorApp.Shared.Models;
@using AtndTrackBlazorApp.Shared;
@inject HttpClient _httpClient;
@inject NavigationManager router;
<EditForm Model="@employeeModel" OnValidSubmit="SaveEmployee">
    <div class="card">
        <div class="top-heading px-4">
            <div class="text-heading col-6 float-left">
                <h5>Add Employee</h5>
            </div>
            <div class="button-heading  col-6 float-right">
                <a type="submit" class="btn-sm btn-primary"><span class=" oi oi-clipboard" aria-hidden="true"></span>&nbsp;Submit</a>
                <NavLink class="btn-sm btn-secondary btnCancel" href="Employee">
                    <span class="oi oi-arrow-left" aria-hidden="true"></span>&nbsp;Cancel
                </NavLink>&nbsp;
            </div>
        </div>
        <div class="card-body col-sm-12">

            <DataAnnotationsValidator />
            <ValidationSummary />
            <fieldset>
                <div>Personal Details</div>
                <hr />
                <div class="row col-12">
                    <div class="col-6 float-left">
                        <div class="form-row">
                            <label class="col-md-4 col-form-label-sm">Name</label>
                            <div>
                                <InputText class="form-control-sm" @bind-Value="employeeModel.FirstName" />
                            </div>
                        </div>
                        <div class="form-row">
                            <label class="col-md-4 col-form-label-sm">Last Name</label>
                            <div>
                                <InputText class="form-control-sm" @bind-Value="employeeModel.LastName" />
                            </div>
                        </div>
                        <div class="form-row">
                            <label class="col-md-4 col-form-label-sm">Middle Name</label>
                            <div>
                                <InputText class="form-control-sm" @bind-Value="employeeModel.MiddleName" />
                            </div>
                        </div>
                        <div class="form-row">
                            <label class="col-md-4 col-form-label-sm">Department</label>
                            <div>
                                <select class="form-control-sm" @bind="employeeModel.DepartmentId">
                                    @foreach (var item in departmentModels)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="form-row">
                            <label class="col-md-4 col-form-label-sm">Designation</label>
                            <div>
                                <select class="form-control-sm" @bind="employeeModel.DesignationId">
                                    @foreach (var item in designationModels)
                                    {
                                        <option value="@item.DesignationId">@item.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-6 float-right">
                        <div class="form-row">
                            <label class="col-md-4 col-form-label-sm">Mobile</label>
                            <div>
                                <InputText class="form-control-sm" @bind-Value="employeeModel.Mobile" />
                            </div>
                        </div>
                        <div class="form-row">
                            <label class="col-md-4 col-form-label-sm">Gender</label>
                            <div>
                                <label class="col-form-label-sm">Male</label>
                                <InputCheckbox @bind-Value="employeeModel.IsMale" />
                                <label class="col-form-label-sm">FeMale</label>
                                <InputCheckbox @bind-Value="employeeModel.IsFeMale" />
                            </div>
                        </div>
                        <div class="form-row">
                            <label class="col-md-4 col-form-label-sm">Email</label>
                            <div>
                                <InputText class="form-control-sm" @bind-Value="employeeModel.Email" />
                            </div>
                        </div>
                        <div class="form-row">
                            <label class="col-md-4 col-form-label-sm">Address</label>
                            <div>
                                <InputTextArea class="form-control-sm" @bind-Value="employeeModel.Address" />
                            </div>
                        </div>
                        <div class="form-row">
                            <label class="col-md-4 col-form-label-sm">Date of Birth</label>
                            <div>
                                <InputDate class="form-control-sm" @bind-Value="employeeModel.Dob" />
                            </div>
                        </div>
                    </div>
                </div>
            </fieldset>
            <WorkDetails jobDetailModel1=@employeeModel />
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }
    private EmployeeModel employeeModel = new EmployeeModel() { JobDetail = new JobDetailModel[] { new JobDetailModel() } };
    private DepartmentModel[] departmentModels = new List<DepartmentModel>().ToArray();
    private DesignationModel[] designationModels = new List<DesignationModel>().ToArray();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("IN Save Dept");
            await BindDropdown().ConfigureAwait(false);
            if (id != 0)
            {
                employeeModel.Id = id;
                var result = await _httpClient.GetJsonAsync<EmployeeModel>($"api/Employee/{id}").ConfigureAwait(false);
                if (result != null)
                {
                    Console.WriteLine("add empl " + System.Text.Json.JsonSerializer.Serialize(result));
                    employeeModel = result;
                }
            }
            if (employeeModel?.JobDetail == null)
                employeeModel.JobDetail = new JobDetailModel[0];
        }
        catch (Exception ex)
        {

            throw;
        }
    }

    private async Task BindDropdown()
    {
        await BindDepartmentDropDown().ConfigureAwait(false);
        await BindDesignationDropDown().ConfigureAwait(false);

    }

    private async Task BindDesignationDropDown()
    {
        var response = await _httpClient.GetJsonAsync<DesignationModel[]>("api/Organization/Designations").ConfigureAwait(false);
        Console.WriteLine("respnose ", response);
        designationModels = response;

    }

    private async Task BindDepartmentDropDown()
    {
        var response = await _httpClient.GetJsonAsync<DepartmentModel[]>("api/Organization/departments").ConfigureAwait(false);
        Console.WriteLine("respnose ", response);
        departmentModels = response;

    }

    private async Task SaveEmployee()
    {
        try
        {
            Console.WriteLine("IN Save Dept");
            employeeModel.Id = id;
            var result = await _httpClient.PostJsonAsync<bool>("api/Employee", employeeModel).ConfigureAwait(false);
            if (result) router.NavigateTo("/employee");
        }
        catch (Exception ex)
        {

            throw;
        }
    }
}

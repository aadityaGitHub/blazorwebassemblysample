@page "/leaverequests";
@inject HttpClient httpClient;
@using AtndTrackBlazorApp.Shared.Models
@using AtndTrackBlazorApp.Shared
@using Blazored.Modal
@using Blazored.Modal.Services
@inject NavigationManager router;

@if (LeaveRequestModels == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="top-heading px-4">
            <div class="text-heading col-6 float-left">
                <h5>LeaveRequests</h5>
            </div>
            @*<div class="button-heading  col-6 float-right">
                    <a class="nav-link" href="LeaveRequest/0">
                        <span class="oi oi-list-rich" aria-hidden="true"></span>Add LeaveRequests
                    </a>&nbsp;
                </div>*@
        </div>
        <div class="card-body col-sm-12">
            <table border="1">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>From</th>
                        <th>To</th>
                        <th>Email Alert To</th>
                        <th>Type of Leave</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in LeaveRequestModels)
                    {
                        <tr>
                            <td>@item.Id</td>
                            <td>@item.EmployeeName</td>
                            <td>@item.DateFrom?.ToString("dd-MM-yy")</td>
                            <td>@item.DateTo?.ToString("dd-MM-yy")</td>
                            <td>@item.EamilAlertTo</td>
                            <td>@Enum.GetName(typeof(LeaveTypes), item.LeaveTypeId)</td>
                            <td>@item.Status</td>
                            <td>
                                <div class="form-inline">
                                    <a class="nav-link" href="@($"LeaveRequest/{item.Id}")">
                                        Edit
                                    </a>
                                    <a class="nav-link">
                                        Delete
                                    </a>
                                    @if (item.Status == LeaveStatusTypes.Pending.ToString())
                                    {
                                        <a class="nav-link" href="@($"leaverequestresponse/{item.Id}/{(int)LeaveStatusTypes.Approved}")">
                                            Approve
                                        </a>
                                        <button @onclick="@(() => ShowEditMovie(item.Id,(int)LeaveStatusTypes.Approved,item.EmployeeName))" class="btn btn-primary">Approve</button>
                                    }
                                    @if ((item.Status == LeaveStatusTypes.Pending.ToString() || item.Status == LeaveStatusTypes.Approved.ToString()) && item.Status != LeaveStatusTypes.Approved.ToString())
                                    {<a class="nav-link" href="@($"leaverequestresponse/{item.Id}/{(int)LeaveStatusTypes.Declined}")">
                                            Decline
                                        </a>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}
@code {

    public string id { get; set; }
    [Parameter]
    public int empid { get; set; }
    private LeaveRequestModel[] LeaveRequestModels = new List<LeaveRequestModel>().ToArray();
    [CascadingParameter] public IModalService Modal { get; set; }
    protected override async Task OnInitializedAsync()
    {
        //if (empid <= 0)
        //    router.NavigateTo("/LeaveRequest");

        Console.WriteLine("init called.");
        LeaveRequestModels = await httpClient.GetJsonAsync<LeaveRequestModel[]>("api/LeaveRequest").ConfigureAwait(false);
        Console.WriteLine("respnose " + LeaveRequestModels);
        //LeaveRequestModels = response;
    }
    void ShowEditMovie(int id, int leaveStatus,string employeeName)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(LeaveStatusUpdate.id), id);
        parameters.Add(nameof(LeaveStatusUpdate.leavestatus), leaveStatus);
        parameters.Add(nameof(LeaveStatusUpdate.employeeName), employeeName);

        Modal.Show<LeaveStatusUpdate>($"{employeeName}-Leave Request", parameters);
    }
}
